=begin
#Insights Service Approval APIs

#APIs to query approval service

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for ApprovalAPIClient::AdminsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'AdminsApi' do
  before do
    # run before each test
    @instance = ApprovalAPIClient::AdminsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AdminsApi' do
    it 'should create an instance of AdminsApi' do
      expect(@instance).to be_instance_of(ApprovalAPIClient::AdminsApi)
    end
  end

  # unit tests for add_action
  # Add an action
  # 
  # @param stage_id id of stage
  # @param body Action object that will be added
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'add_action test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_group
  # Add a new approver group
  # 
  # @param body Approver group object that needs to be added to the orgnization
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'add_group test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_stage
  # Add a new stage
  # 
  # @param request_id id of request
  # @param body Stage that needs to be added
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'add_stage test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_template
  # Add a new template to the orgnization
  # 
  # @param body Approval template object that needs to be added to the orgnization
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'add_template test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_workflow
  # Add a new workflow
  # 
  # @param template_id id of template
  # @param body Workflow that needs to be added
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'add_workflow test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for fetch_action_by_id
  # Finds approver action by id
  # 
  # @param id query by id
  # @param [Hash] opts the optional parameters
  # @return [Action]
  describe 'fetch_action_by_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for fetch_actions
  # Returns list of approver actions
  # Returns a list of approver actions
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit How many items to return at one time (max 1000)
  # @option opts [Integer] :offset Starting Offset
  # @return [Array<Action>]
  describe 'fetch_actions test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for fetch_group_by_id
  # Finds approver group by id
  # 
  # @param id query by id
  # @param [Hash] opts the optional parameters
  # @return [Group]
  describe 'fetch_group_by_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for fetch_groups
  # Returns list of approver groups
  # Returns a list of approver groups
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit How many items to return at one time (max 1000)
  # @option opts [Integer] :offset Starting Offset
  # @return [Array<Group>]
  describe 'fetch_groups test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for fetch_requests
  # List approval requests
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :decision fetch item by given decision (unknown, approved, denied)
  # @option opts [Array<String>] :state fetch item by given state (pending, skipped, notified, finished)
  # @option opts [String] :requester fetch item by given requester
  # @option opts [Integer] :limit How many items to return at one time (max 1000)
  # @option opts [Integer] :offset Starting Offset
  # @return [Array<Request>]
  describe 'fetch_requests test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for fetch_stage_by_id
  # Retrieves approval stages by given id
  # 
  # @param id query by id
  # @param [Hash] opts the optional parameters
  # @return [Request]
  describe 'fetch_stage_by_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for fetch_stages
  # List approval stages
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit How many items to return at one time (max 1000)
  # @option opts [Integer] :offset Starting Offset
  # @return [Array<Stage>]
  describe 'fetch_stages test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for fetch_template_by_id
  # Finds template by id
  # 
  # @param id query by id
  # @param [Hash] opts the optional parameters
  # @return [Template]
  describe 'fetch_template_by_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for fetch_template_workflows
  # Returns list of workflows by given template id
  # Returns a list of workflows
  # @param template_id id of template
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit How many items to return at one time (max 1000)
  # @option opts [Integer] :offset Starting Offset
  # @return [Array<Workflow>]
  describe 'fetch_template_workflows test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for fetch_templates
  # Returns list of templates
  # Returns list of templates
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit How many items to return at one time (max 1000)
  # @option opts [Integer] :offset Starting Offset
  # @return [Template]
  describe 'fetch_templates test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for fetch_workflow_by_id
  # List all approval workflow by id
  # 
  # @param id query by id
  # @param [Hash] opts the optional parameters
  # @return [Workflow]
  describe 'fetch_workflow_by_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for fetch_workflow_requests
  # List of all approval requests
  # Returns a list of approval requests
  # @param workflow_id id of workflow
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit How many items to return at one time (max 1000)
  # @option opts [Integer] :offset Starting Offset
  # @return [Array<Request>]
  describe 'fetch_workflow_requests test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for fetch_workflows
  # List all approval workflows
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit How many items to return at one time (max 1000)
  # @option opts [Integer] :offset Starting Offset
  # @return [Array<Workflow>]
  describe 'fetch_workflows test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_action
  # Delete action by id
  # 
  # @param id query by id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'remove_action test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_group
  # Delete approver group by id
  # 
  # @param id query by id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'remove_group test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_request
  # Delete approval request by id
  # 
  # @param id query by id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'remove_request test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_stage
  # Delete approval stage by id
  # 
  # @param id query by id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'remove_stage test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_template
  # Delete template by id
  # 
  # @param id query by id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'remove_template test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_workflow
  # Delete approval workflow by id
  # 
  # @param id query by id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'remove_workflow test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_action
  # Update an existing action
  # 
  # @param id query by id
  # @param body Action object that needs to be updated
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_action test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_group
  # Update an existing approver group
  # 
  # @param id query by id
  # @param body Approver group object that needs to be updated
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_group test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_request
  # Update an existing approval request status
  # 
  # @param id query by id
  # @param body new status
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_request test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_stage
  # Update an existing approval stage
  # 
  # @param id query by id
  # @param body new stage
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_stage test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_template
  # Update an existing template
  # 
  # @param id query by id
  # @param body Template needs to be updated
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_template test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_workflow
  # Update an existing approval workflow
  # 
  # @param id query by id
  # @param body Approval workflow object that needs to be updated
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_workflow test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
