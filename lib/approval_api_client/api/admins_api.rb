=begin
#Insights Service Approval APIs

#APIs to query approval service

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module ApprovalAPIClient
  class AdminsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add an action
    # Add an action
    # @param stage_id id of stage
    # @param body Action object that will be added
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_action(stage_id, body, opts = {})
      add_action_with_http_info(stage_id, body, opts)
      return nil
    end

    # Add an action
    # Add an action
    # @param stage_id id of stage
    # @param body Action object that will be added
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_action_with_http_info(stage_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.add_action ..."
      end
      # verify the required parameter 'stage_id' is set
      if @api_client.config.client_side_validation && stage_id.nil?
        fail ArgumentError, "Missing the required parameter 'stage_id' when calling AdminsApi.add_action"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AdminsApi.add_action"
      end
      # resource path
      local_var_path = "/stages/{stage_id}/actions".sub('{' + 'stage_id' + '}', stage_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['approval_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#add_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a new approver group
    # Add a new approver group
    # @param body Approver group object that needs to be added to the orgnization
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_group(body, opts = {})
      add_group_with_http_info(body, opts)
      return nil
    end

    # Add a new approver group
    # Add a new approver group
    # @param body Approver group object that needs to be added to the orgnization
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_group_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.add_group ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AdminsApi.add_group"
      end
      # resource path
      local_var_path = "/groups"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['approval_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#add_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a new stage
    # Add stage
    # @param request_id id of request
    # @param body Stage that needs to be added
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_stage(request_id, body, opts = {})
      add_stage_with_http_info(request_id, body, opts)
      return nil
    end

    # Add a new stage
    # Add stage
    # @param request_id id of request
    # @param body Stage that needs to be added
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_stage_with_http_info(request_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.add_stage ..."
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling AdminsApi.add_stage"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AdminsApi.add_stage"
      end
      # resource path
      local_var_path = "/requests/{request_id}/stages".sub('{' + 'request_id' + '}', request_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['approval_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#add_stage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a new template to the orgnization
    # Add template
    # @param body Approval template object that needs to be added to the orgnization
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_template(body, opts = {})
      add_template_with_http_info(body, opts)
      return nil
    end

    # Add a new template to the orgnization
    # Add template
    # @param body Approval template object that needs to be added to the orgnization
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_template_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.add_template ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AdminsApi.add_template"
      end
      # resource path
      local_var_path = "/templates"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['approval_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#add_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a new workflow
    # Add workflow
    # @param template_id id of template
    # @param body Workflow that needs to be added
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_workflow(template_id, body, opts = {})
      add_workflow_with_http_info(template_id, body, opts)
      return nil
    end

    # Add a new workflow
    # Add workflow
    # @param template_id id of template
    # @param body Workflow that needs to be added
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_workflow_with_http_info(template_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.add_workflow ..."
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling AdminsApi.add_workflow"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AdminsApi.add_workflow"
      end
      # resource path
      local_var_path = "/templates/{template_id}/workflows".sub('{' + 'template_id' + '}', template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['approval_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#add_workflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Finds approver action by id
    # Finds approver action by id
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [Action]
    def fetch_action_by_id(id, opts = {})
      data, _status_code, _headers = fetch_action_by_id_with_http_info(id, opts)
      return data
    end

    # Finds approver action by id
    # Finds approver action by id
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Action, Fixnum, Hash)>] Action data, response status code and response headers
    def fetch_action_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.fetch_action_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminsApi.fetch_action_by_id"
      end
      # resource path
      local_var_path = "/actions/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Action')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#fetch_action_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns list of approver actions
    # Returns a list of approver actions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 1000) (default to 20)
    # @option opts [Integer] :offset Starting Offset (default to 0)
    # @return [Array<Action>]
    def fetch_actions(opts = {})
      data, _status_code, _headers = fetch_actions_with_http_info(opts)
      return data
    end

    # Returns list of approver actions
    # Returns a list of approver actions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 1000)
    # @option opts [Integer] :offset Starting Offset
    # @return [Array<(Array<Action>, Fixnum, Hash)>] Array<Action> data, response status code and response headers
    def fetch_actions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.fetch_actions ..."
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdminsApi.fetch_actions, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 20
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdminsApi.fetch_actions, must be greater than or equal to 20.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling AdminsApi.fetch_actions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/actions"

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['approval_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Action>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#fetch_actions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Finds approver group by id
    # Finds approver group by id
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [Group]
    def fetch_group_by_id(id, opts = {})
      data, _status_code, _headers = fetch_group_by_id_with_http_info(id, opts)
      return data
    end

    # Finds approver group by id
    # Finds approver group by id
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Group, Fixnum, Hash)>] Group data, response status code and response headers
    def fetch_group_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.fetch_group_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminsApi.fetch_group_by_id"
      end
      # resource path
      local_var_path = "/groups/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Group')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#fetch_group_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns list of approver groups
    # Returns a list of approver groups
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 1000) (default to 20)
    # @option opts [Integer] :offset Starting Offset (default to 0)
    # @return [Array<Group>]
    def fetch_groups(opts = {})
      data, _status_code, _headers = fetch_groups_with_http_info(opts)
      return data
    end

    # Returns list of approver groups
    # Returns a list of approver groups
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 1000)
    # @option opts [Integer] :offset Starting Offset
    # @return [Array<(Array<Group>, Fixnum, Hash)>] Array<Group> data, response status code and response headers
    def fetch_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.fetch_groups ..."
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdminsApi.fetch_groups, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 20
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdminsApi.fetch_groups, must be greater than or equal to 20.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling AdminsApi.fetch_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/groups"

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['approval_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Group>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#fetch_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List approval requests
    # List requests
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :decision fetch item by given decision (unknown, approved, denied)
    # @option opts [Array<String>] :state fetch item by given state (pending, skipped, notified, finished)
    # @option opts [String] :requester fetch item by given requester
    # @option opts [Integer] :limit How many items to return at one time (max 1000) (default to 20)
    # @option opts [Integer] :offset Starting Offset (default to 0)
    # @return [Array<Request>]
    def fetch_requests(opts = {})
      data, _status_code, _headers = fetch_requests_with_http_info(opts)
      return data
    end

    # List approval requests
    # List requests
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :decision fetch item by given decision (unknown, approved, denied)
    # @option opts [Array<String>] :state fetch item by given state (pending, skipped, notified, finished)
    # @option opts [String] :requester fetch item by given requester
    # @option opts [Integer] :limit How many items to return at one time (max 1000)
    # @option opts [Integer] :offset Starting Offset
    # @return [Array<(Array<Request>, Fixnum, Hash)>] Array<Request> data, response status code and response headers
    def fetch_requests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.fetch_requests ..."
      end
      if @api_client.config.client_side_validation && opts[:'decision'] && !opts[:'decision'].all?{|item| ['unknown', 'approved', 'denied'].include?(item)}
        fail ArgumentError, 'invalid value for "decision", must include one of unknown, approved, denied'
      end
      if @api_client.config.client_side_validation && opts[:'state'] && !opts[:'state'].all?{|item| ['pending', 'skipped', 'notified', 'finished'].include?(item)}
        fail ArgumentError, 'invalid value for "state", must include one of pending, skipped, notified, finished'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdminsApi.fetch_requests, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 20
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdminsApi.fetch_requests, must be greater than or equal to 20.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling AdminsApi.fetch_requests, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/requests"

      # query parameters
      query_params = {}
      query_params[:'decision'] = @api_client.build_collection_param(opts[:'decision'], :csv) if !opts[:'decision'].nil?
      query_params[:'state'] = @api_client.build_collection_param(opts[:'state'], :csv) if !opts[:'state'].nil?
      query_params[:'requester'] = opts[:'requester'] if !opts[:'requester'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Request>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#fetch_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves approval stages by given id
    # Get stage by given id
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [Request]
    def fetch_stage_by_id(id, opts = {})
      data, _status_code, _headers = fetch_stage_by_id_with_http_info(id, opts)
      return data
    end

    # Retrieves approval stages by given id
    # Get stage by given id
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Request, Fixnum, Hash)>] Request data, response status code and response headers
    def fetch_stage_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.fetch_stage_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminsApi.fetch_stage_by_id"
      end
      # resource path
      local_var_path = "/stages/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Request')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#fetch_stage_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List approval stages
    # List all approval stages
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 1000) (default to 20)
    # @option opts [Integer] :offset Starting Offset (default to 0)
    # @return [Array<Stage>]
    def fetch_stages(opts = {})
      data, _status_code, _headers = fetch_stages_with_http_info(opts)
      return data
    end

    # List approval stages
    # List all approval stages
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 1000)
    # @option opts [Integer] :offset Starting Offset
    # @return [Array<(Array<Stage>, Fixnum, Hash)>] Array<Stage> data, response status code and response headers
    def fetch_stages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.fetch_stages ..."
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdminsApi.fetch_stages, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 20
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdminsApi.fetch_stages, must be greater than or equal to 20.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling AdminsApi.fetch_stages, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/stages"

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Stage>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#fetch_stages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Finds template by id
    # Find template by given id
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [Template]
    def fetch_template_by_id(id, opts = {})
      data, _status_code, _headers = fetch_template_by_id_with_http_info(id, opts)
      return data
    end

    # Finds template by id
    # Find template by given id
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Template, Fixnum, Hash)>] Template data, response status code and response headers
    def fetch_template_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.fetch_template_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminsApi.fetch_template_by_id"
      end
      # resource path
      local_var_path = "/templates/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Template')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#fetch_template_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns list of workflows by given template id
    # Returns a list of workflows
    # @param template_id id of template
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 1000) (default to 20)
    # @option opts [Integer] :offset Starting Offset (default to 0)
    # @return [Array<Workflow>]
    def fetch_template_workflows(template_id, opts = {})
      data, _status_code, _headers = fetch_template_workflows_with_http_info(template_id, opts)
      return data
    end

    # Returns list of workflows by given template id
    # Returns a list of workflows
    # @param template_id id of template
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 1000)
    # @option opts [Integer] :offset Starting Offset
    # @return [Array<(Array<Workflow>, Fixnum, Hash)>] Array<Workflow> data, response status code and response headers
    def fetch_template_workflows_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.fetch_template_workflows ..."
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling AdminsApi.fetch_template_workflows"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdminsApi.fetch_template_workflows, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 20
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdminsApi.fetch_template_workflows, must be greater than or equal to 20.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling AdminsApi.fetch_template_workflows, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/templates/{template_id}/workflows".sub('{' + 'template_id' + '}', template_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['approval_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Workflow>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#fetch_template_workflows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns list of templates
    # Returns list of templates
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 1000) (default to 20)
    # @option opts [Integer] :offset Starting Offset (default to 0)
    # @return [Array<Template>]
    def fetch_templates(opts = {})
      data, _status_code, _headers = fetch_templates_with_http_info(opts)
      return data
    end

    # Returns list of templates
    # Returns list of templates
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 1000)
    # @option opts [Integer] :offset Starting Offset
    # @return [Array<(Array<Template>, Fixnum, Hash)>] Array<Template> data, response status code and response headers
    def fetch_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.fetch_templates ..."
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdminsApi.fetch_templates, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 20
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdminsApi.fetch_templates, must be greater than or equal to 20.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling AdminsApi.fetch_templates, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/templates"

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['approval_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Template>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#fetch_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List approval workflow by id
    # Display workflow by given id
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [Workflow]
    def fetch_workflow_by_id(id, opts = {})
      data, _status_code, _headers = fetch_workflow_by_id_with_http_info(id, opts)
      return data
    end

    # List approval workflow by id
    # Display workflow by given id
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Workflow, Fixnum, Hash)>] Workflow data, response status code and response headers
    def fetch_workflow_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.fetch_workflow_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminsApi.fetch_workflow_by_id"
      end
      # resource path
      local_var_path = "/workflows/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['approval_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Workflow')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#fetch_workflow_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List of all approval requests
    # Returns a list of approval requests
    # @param workflow_id id of workflow
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 1000) (default to 20)
    # @option opts [Integer] :offset Starting Offset (default to 0)
    # @return [Array<Request>]
    def fetch_workflow_requests(workflow_id, opts = {})
      data, _status_code, _headers = fetch_workflow_requests_with_http_info(workflow_id, opts)
      return data
    end

    # List of all approval requests
    # Returns a list of approval requests
    # @param workflow_id id of workflow
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 1000)
    # @option opts [Integer] :offset Starting Offset
    # @return [Array<(Array<Request>, Fixnum, Hash)>] Array<Request> data, response status code and response headers
    def fetch_workflow_requests_with_http_info(workflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.fetch_workflow_requests ..."
      end
      # verify the required parameter 'workflow_id' is set
      if @api_client.config.client_side_validation && workflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_id' when calling AdminsApi.fetch_workflow_requests"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdminsApi.fetch_workflow_requests, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 20
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdminsApi.fetch_workflow_requests, must be greater than or equal to 20.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling AdminsApi.fetch_workflow_requests, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/workflows/{workflow_id}/requests".sub('{' + 'workflow_id' + '}', workflow_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['approval_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Request>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#fetch_workflow_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all approval workflows
    # List all approval workflows
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 1000) (default to 20)
    # @option opts [Integer] :offset Starting Offset (default to 0)
    # @return [Array<Workflow>]
    def fetch_workflows(opts = {})
      data, _status_code, _headers = fetch_workflows_with_http_info(opts)
      return data
    end

    # List all approval workflows
    # List all approval workflows
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 1000)
    # @option opts [Integer] :offset Starting Offset
    # @return [Array<(Array<Workflow>, Fixnum, Hash)>] Array<Workflow> data, response status code and response headers
    def fetch_workflows_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.fetch_workflows ..."
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdminsApi.fetch_workflows, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 20
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdminsApi.fetch_workflows, must be greater than or equal to 20.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling AdminsApi.fetch_workflows, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/workflows"

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Workflow>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#fetch_workflows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete action by id
    # Delete action by id
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_action(id, opts = {})
      remove_action_with_http_info(id, opts)
      return nil
    end

    # Delete action by id
    # Delete action by id
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_action_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.remove_action ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminsApi.remove_action"
      end
      # resource path
      local_var_path = "/actions/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#remove_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete approver group by id
    # Delete group
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_group(id, opts = {})
      remove_group_with_http_info(id, opts)
      return nil
    end

    # Delete approver group by id
    # Delete group
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_group_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.remove_group ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminsApi.remove_group"
      end
      # resource path
      local_var_path = "/groups/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#remove_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete approval request by id
    # Delete approval request by id
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_request(id, opts = {})
      remove_request_with_http_info(id, opts)
      return nil
    end

    # Delete approval request by id
    # Delete approval request by id
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_request_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.remove_request ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminsApi.remove_request"
      end
      # resource path
      local_var_path = "/requests/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#remove_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete approval stage by id
    # Delete approval stage
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_stage(id, opts = {})
      remove_stage_with_http_info(id, opts)
      return nil
    end

    # Delete approval stage by id
    # Delete approval stage
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_stage_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.remove_stage ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminsApi.remove_stage"
      end
      # resource path
      local_var_path = "/stages/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#remove_stage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete template by id
    # Delete template by id
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_template(id, opts = {})
      remove_template_with_http_info(id, opts)
      return nil
    end

    # Delete template by id
    # Delete template by id
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_template_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.remove_template ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminsApi.remove_template"
      end
      # resource path
      local_var_path = "/templates/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#remove_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete approval workflow by id
    # Delete approval workflow by id
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_workflow(id, opts = {})
      remove_workflow_with_http_info(id, opts)
      return nil
    end

    # Delete approval workflow by id
    # Delete approval workflow by id
    # @param id query by id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_workflow_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.remove_workflow ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminsApi.remove_workflow"
      end
      # resource path
      local_var_path = "/workflows/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#remove_workflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing action
    # Update an existing action
    # @param id query by id
    # @param body Action object that needs to be updated
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_action(id, body, opts = {})
      update_action_with_http_info(id, body, opts)
      return nil
    end

    # Update an existing action
    # Update an existing action
    # @param id query by id
    # @param body Action object that needs to be updated
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_action_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.update_action ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminsApi.update_action"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AdminsApi.update_action"
      end
      # resource path
      local_var_path = "/actions/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['approval_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#update_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing approver group
    # Update an existing approver group
    # @param id query by id
    # @param body Approver group object that needs to be updated
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_group(id, body, opts = {})
      update_group_with_http_info(id, body, opts)
      return nil
    end

    # Update an existing approver group
    # Update an existing approver group
    # @param id query by id
    # @param body Approver group object that needs to be updated
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_group_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.update_group ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminsApi.update_group"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AdminsApi.update_group"
      end
      # resource path
      local_var_path = "/groups/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['approval_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#update_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing approval request status
    # Update request status
    # @param id query by id
    # @param body new status
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_request(id, body, opts = {})
      update_request_with_http_info(id, body, opts)
      return nil
    end

    # Update an existing approval request status
    # Update request status
    # @param id query by id
    # @param body new status
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_request_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.update_request ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminsApi.update_request"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AdminsApi.update_request"
      end
      # resource path
      local_var_path = "/requests/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['approval_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#update_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing approval stage
    # Update stage
    # @param id query by id
    # @param body new stage
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_stage(id, body, opts = {})
      update_stage_with_http_info(id, body, opts)
      return nil
    end

    # Update an existing approval stage
    # Update stage
    # @param id query by id
    # @param body new stage
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_stage_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.update_stage ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminsApi.update_stage"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AdminsApi.update_stage"
      end
      # resource path
      local_var_path = "/stages/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['approval_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#update_stage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing template
    # Update template
    # @param id query by id
    # @param body Template needs to be updated
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_template(id, body, opts = {})
      update_template_with_http_info(id, body, opts)
      return nil
    end

    # Update an existing template
    # Update template
    # @param id query by id
    # @param body Template needs to be updated
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_template_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.update_template ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminsApi.update_template"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AdminsApi.update_template"
      end
      # resource path
      local_var_path = "/templates/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['approval_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#update_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing approval workflow
    # Update approval workflow
    # @param id query by id
    # @param body Approval workflow object that needs to be updated
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_workflow(id, body, opts = {})
      update_workflow_with_http_info(id, body, opts)
      return nil
    end

    # Update an existing approval workflow
    # Update approval workflow
    # @param id query by id
    # @param body Approval workflow object that needs to be updated
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_workflow_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminsApi.update_workflow ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminsApi.update_workflow"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AdminsApi.update_workflow"
      end
      # resource path
      local_var_path = "/workflows/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['approval_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#update_workflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
